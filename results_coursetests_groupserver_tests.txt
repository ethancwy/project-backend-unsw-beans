============================= test session starts ==============================
platform linux -- Python 3.9.2, pytest-6.2.2, py-1.10.0, pluggy-0.13.1 -- /usr/bin/python3
cachedir: .pytest_cache
hypothesis profile 'default' -> database=DirectoryBasedExampleDatabase('/import/kamen/3/cs1531/project-automarking/tempstore/.hypothesis/examples')
metadata: {'Python': '3.9.2', 'Platform': 'Linux-5.10.0-19-amd64-x86_64-with-glibc2.31', 'Packages': {'pytest': '6.2.2', 'py': '1.10.0', 'pluggy': '0.13.1'}, 'Plugins': {'jest': '0.3.0', 'hypothesis': '6.1.1', 'timeout': '1.4.2', 'snapshottest': '0.6.0', 'metadata': '2.0.1', 'flask': '0.15.1'}}
rootdir: /import/kamen/3/cs1531/project-automarking/tempstore
plugins: jest-0.3.0, hypothesis-6.1.1, timeout-1.4.2, snapshottest-0.6.0, metadata-2.0.1, flask-0.15.1
collecting ... collected 374 items

httpTests/adminTests/test_admin_user_remove.py::testOnceRemovedUserCantDoAnything PASSED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testMessagesAfterUserRemovalCorrectFormat PASSED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovedProfileStillFetchableWithUserProfile PASSED [  0%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromChannel PASSED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalRemovedFromDm PASSED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testRemovalNotInUsersAll PASSED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testEmailReusable PASSED [  1%]
httpTests/adminTests/test_admin_user_remove.py::testHandleReusable PASSED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidUser PASSED   [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveLastOwner PASSED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testCannotRemoveUserNonowner PASSED [  2%]
httpTests/adminTests/test_admin_user_remove.py::testInvalidToken PASSED  [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testSuccessfulPermissionChange PASSED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testCannotDemoteLastOwner PASSED [  3%]
httpTests/adminTests/test_admin_userpermission_change.py::testNonownerCantChangePermissions PASSED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidUser PASSED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidPermission PASSED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testSamePermission PASSED [  4%]
httpTests/adminTests/test_admin_userpermission_change.py::testInvalidToken PASSED [  5%]
httpTests/authTests/test_auth_login.py::testSuccessfulLogin PASSED       [  5%]
httpTests/authTests/test_auth_login.py::testCanHaveTwoSessions PASSED    [  5%]
httpTests/authTests/test_auth_login.py::testUnregisteredUser PASSED      [  5%]
httpTests/authTests/test_auth_login.py::testRegisteredButIncorrectPassword PASSED [  6%]
httpTests/authTests/test_auth_logout.py::testSuccessfulLogout PASSED     [  6%]
httpTests/authTests/test_auth_logout.py::testAccesserrorWhenAlreadyLoggedOut PASSED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[@gmail.com] PASSED [  6%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob] PASSED  [  7%]
httpTests/authTests/test_auth_register.py::testInvalidEmail[bob@bob@bob.com] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[12345] PASSED [  7%]
httpTests/authTests/test_auth_register.py::testInvalidPassword[] PASSED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameFirst[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[] PASSED  [  8%]
httpTests/authTests/test_auth_register.py::testInvalidNameLast[bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb] PASSED [  9%]
httpTests/authTests/test_auth_register.py::testDuplicateEmail PASSED     [  9%]
httpTests/authTests/test_auth_register.py::testRemovedUserName PASSED    [  9%]
httpTests/authTests/test_auth_register.py::testSuccessfulRegistration PASSED [  9%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[Bob-Smith-bobsmith] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testBasicHandleGeneratedCorrectly[ababababab-cdcdcdcdcdcd-abababababcdcdcdcdcd] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrs-abcdefghijklmnopqrs-abcdefghij-klmnopqrs-abcdefghijklmnopqrs0] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abcdefghij-klmnopqrst-abcdefghijklmnopqrst-abcdefghij-klmnopqrst-abcdefghijklmnopqrst0] PASSED [ 10%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[@bcdefgh!j-klmn opqrst-bcdefghjklmnopqrst-bcdefghj-klmnopqrst-bcdefghjklmnopqrst0] PASSED [ 11%]
httpTests/authTests/test_auth_register.py::testDuplicateHandlesGeneratedCorrectly[abc-def0-abcdef0-abc-def-abcdef1] PASSED [ 11%]
httpTests/authTests/test_passwordreset_request.py::testReturnFormatCorrect PASSED [ 11%]
httpTests/authTests/test_passwordreset_request.py::testPasswordRequestLogsOutEverywhere PASSED [ 12%]
httpTests/authTests/test_passwordreset_reset.py::testInvalidPassword PASSED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCanAddownerWhenMember PASSED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerMemberCanAddowner PASSED [ 12%]
httpTests/channelTests/test_channel_addowner.py::testChannelOwnerCantAddownerWhenNonMember PASSED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic FAILED [ 13%]
httpTests/channelTests/test_channel_addowner.py::testMemberCannotAddOwner PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testCannotAddownerPrexistingChannelOwner PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidUId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testWithInvalidChannelId PASSED [ 14%]
httpTests/channelTests/test_channel_addowner.py::testInvalidToken PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testMemberSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testNonMemberNotSuccessful PASSED [ 15%]
httpTests/channelTests/test_channel_details.py::testInvalidChannelId PASSED [ 16%]
httpTests/channelTests/test_channel_details.py::testInvalidToken PASSED  [ 16%]
httpTests/channelTests/test_channel_invite.py::testDuplicateInvite PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalOwner PASSED [ 16%]
httpTests/channelTests/test_channel_invite.py::testInviteGlobalMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvitationFromNonChannelMember PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testChannelIdInvalid PASSED [ 17%]
httpTests/channelTests/test_channel_invite.py::testUIdInvalid PASSED     [ 17%]
httpTests/channelTests/test_channel_invite.py::testInvalidatedToken PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPublic PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalOwnerJoinChannelPrivate PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberJoinPublic PASSED [ 18%]
httpTests/channelTests/test_channel_join.py::testGlobalMemberCantJoinPrivate PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testAlreadyJoinedChannel PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testJoinInvalidChannelId PASSED [ 19%]
httpTests/channelTests/test_channel_join.py::testInvalidatedToken PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testMemberLeaveChannelSuccessfully PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testLeaveChannelWhenNotMember PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidChannelId PASSED [ 20%]
httpTests/channelTests/test_channel_leave.py::testInvalidToken PASSED    [ 21%]
httpTests/channelTests/test_channel_messages.py::testMessageTimestamp PASSED [ 21%]
httpTests/channelTests/test_channel_messages.py::testUnderFiftyMessagesSent PASSED [ 21%]
httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent FAILED [ 21%]
httpTests/channelTests/test_channel_messages.py::testRemovalByEditReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testRemovalByDeletionReflected PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 22%]
httpTests/channelTests/test_channel_messages.py::testInputErrorWhenChannelIdInvalid PASSED [ 23%]
httpTests/channelTests/test_channel_messages.py::testAccessErrorWhenInvalidTokenGiven PASSED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testOwnerCanRemoveOwner PASSED [ 23%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerMmberCanRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerNonmemberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testNonmemberCannotRemoveOwner PASSED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner FAILED [ 24%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveLastOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testGlobalOwnerCannotRemoveOnlyOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testCannotRemoveNonOwner PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidUId PASSED [ 25%]
httpTests/channelTests/test_channel_removeowner.py::testWithInvalidChannelId PASSED [ 26%]
httpTests/channelTests/test_channel_removeowner.py::testInvalidatedToken PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[True-andys room] PASSED [ 26%]
httpTests/channels_tests/test_channels_create.py::testCreateChannel[False-andys room] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[True-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-] PASSED [ 27%]
httpTests/channels_tests/test_channels_create.py::testInvalidChannelNameLength[False-I AM NOT A TOY AND ALSO THIS NAME IS TOO LONG] PASSED [ 28%]
httpTests/channels_tests/test_channels_create.py::testInvalidatedToken PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInNoChannels PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[True-andy] PASSED [ 28%]
httpTests/channels_tests/test_channels_list.py::testWhenInOneChannel[False-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-True-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[False-False-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-True-ZERG-andy] PASSED [ 29%]
httpTests/channels_tests/test_channels_list.py::testWhenInMultipleChannels[True-False-ZERG-andy] PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testListAfterLeaveChannel PASSED [ 30%]
httpTests/channels_tests/test_channels_list.py::testInvalidatedToken PASSED [ 30%]
httpTests/channels_tests/test_channels_listall.py::testWhenNoChannels PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPrivate PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenOneChannelExistsPublic PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testWhenMultipleChannelsExist PASSED [ 31%]
httpTests/channels_tests/test_channels_listall.py::testInvalidatedToken PASSED [ 32%]
httpTests/dmTests/test_dm_create.py::testSuccessfulDmCreation PASSED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationSingle PASSED     [ 32%]
httpTests/dmTests/test_dm_create.py::testDmNameCreationMultiple PASSED   [ 32%]
httpTests/dmTests/test_dm_create.py::testDmToInvalidUsers PASSED         [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButOneInvalid PASSED   [ 33%]
httpTests/dmTests/test_dm_create.py::testDmToUsersButDuplicate PASSED    [ 33%]
httpTests/dmTests/test_dm_create.py::testInvalidToken PASSED             [ 33%]
httpTests/dmTests/test_dm_details.py::testMemberSuccessful PASSED        [ 34%]
httpTests/dmTests/test_dm_details.py::testNonMemberNotSuccessful PASSED  [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidDmId PASSED             [ 34%]
httpTests/dmTests/test_dm_details.py::testInvalidToken PASSED            [ 35%]
httpTests/dmTests/test_dm_leave.py::testMemberLeaveDmSuccessfully PASSED [ 35%]
httpTests/dmTests/test_dm_leave.py::testLeaveDmWhenNotMember PASSED      [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidDmId PASSED               [ 35%]
httpTests/dmTests/test_dm_leave.py::testInvalidToken PASSED              [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInNoDms PASSED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInOneDm PASSED                [ 36%]
httpTests/dmTests/test_dm_list.py::testWhenInMultipleDms PASSED          [ 36%]
httpTests/dmTests/test_dm_list.py::testListAfterLeaveDm PASSED           [ 37%]
httpTests/dmTests/test_dm_list.py::testInvalidatedToken PASSED           [ 37%]
httpTests/dmTests/test_dm_messages.py::testUnderFiftyMessagesSent PASSED [ 37%]
httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent FAILED  [ 37%]
httpTests/dmTests/test_dm_messages.py::testRemovalByEditReflected PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testRemovalByDeletionReflected PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenStartGreaterThanMessageNum PASSED [ 38%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenUserIsNonMember PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testInputErrorWhenDmIdInvalid PASSED [ 39%]
httpTests/dmTests/test_dm_messages.py::testAccessErrorWhenInvalidTokenGiven PASSED [ 39%]
httpTests/dmTests/test_dm_remove.py::testSuccessfulDmRemoval PASSED      [ 39%]
httpTests/dmTests/test_dm_remove.py::testRemovalRemovesMessages PASSED   [ 40%]
httpTests/dmTests/test_dm_remove.py::testNonownerCannotRemoveDm PASSED   [ 40%]
httpTests/dmTests/test_dm_remove.py::testOwnerNonmemberCannotRemoveDm PASSED [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidDmId PASSED              [ 40%]
httpTests/dmTests/test_dm_remove.py::testInvalidToken PASSED             [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageChannel PASSED [ 41%]
httpTests/messageTests/test_message_edit.py::testOriginalPosterCanEditMessageDm PASSED [ 41%]
httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageChannel PASSED [ 41%]
httpTests/messageTests/test_message_edit.py::testOwnerCanEditMembersMessageDm PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCanEditMembersMessageChannel PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testGlobalOwnerCantEditMembersMessageDm PASSED [ 42%]
httpTests/messageTests/test_message_edit.py::testEmptyEditDeletesMessage PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidMessageLength PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testCannotEditDeletedMessage PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testNonownerNonposterCantEdit PASSED [ 43%]
httpTests/messageTests/test_message_edit.py::testInvalidToken PASSED     [ 44%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUnique PASSED [ 44%]
httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3 FAILED [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinChannelOwnerInChannel PASSED [ 44%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinDmOwnerInDm PASSED [ 45%]
httpTests/messageTests/test_message_pin.py::testSuccessfulPinGlobalOwnerInChannel PASSED [ 45%]
httpTests/messageTests/test_message_pin.py::testInvalidMessageId PASSED  [ 45%]
httpTests/messageTests/test_message_pin.py::testCannotPinTwice PASSED    [ 45%]
httpTests/messageTests/test_message_pin.py::testChannelMemberCantPin PASSED [ 46%]
httpTests/messageTests/test_message_pin.py::testDmMemberCantPin PASSED   [ 46%]
httpTests/messageTests/test_message_pin.py::testGlobalOwnerCantPinInDm PASSED [ 46%]
httpTests/messageTests/test_message_pin.py::testNonmemberCantPin PASSED  [ 47%]
httpTests/messageTests/test_message_pin.py::testInvalidToken PASSED      [ 47%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactInChannel PASSED [ 47%]
httpTests/messageTests/test_message_react.py::testSuccessfulReactToDmMessage PASSED [ 47%]
httpTests/messageTests/test_message_react.py::testInvalidMessageId PASSED [ 48%]
httpTests/messageTests/test_message_react.py::testInvalidReactId PASSED  [ 48%]
httpTests/messageTests/test_message_react.py::testCantReactTwice PASSED  [ 48%]
httpTests/messageTests/test_message_react.py::testNonmemberCannotReact PASSED [ 48%]
httpTests/messageTests/test_message_react.py::testInvalidToken PASSED    [ 49%]
httpTests/messageTests/test_message_remove.py::testOriginalPosterCanRemoveMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testOwnerCanRemoveMembersMessage PASSED [ 49%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCanRemoveMembersMessageChannel PASSED [ 50%]
httpTests/messageTests/test_message_remove.py::testGlobalOwnerCantRemoveMembersMessageDm PASSED [ 50%]
httpTests/messageTests/test_message_remove.py::testCannotRemoveDeletedMessage PASSED [ 50%]
httpTests/messageTests/test_message_remove.py::testNonownerNonposterCantRemoveMessage PASSED [ 50%]
httpTests/messageTests/test_message_remove.py::testInvalidToken PASSED   [ 51%]
httpTests/messageTests/test_message_send.py::testValidMessage PASSED     [ 51%]
httpTests/messageTests/test_message_send.py::testNonmemberPost PASSED    [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidChannel PASSED   [ 51%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[] PASSED [ 52%]
httpTests/messageTests/test_message_send.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 52%]
httpTests/messageTests/test_message_send.py::testInvalidToken PASSED     [ 52%]
httpTests/messageTests/test_message_senddm.py::testValidMessage PASSED   [ 52%]
httpTests/messageTests/test_message_senddm.py::testNonmemberPost PASSED  [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidDm PASSED      [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[] PASSED [ 53%]
httpTests/messageTests/test_message_senddm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 54%]
httpTests/messageTests/test_message_senddm.py::testInvalidToken PASSED   [ 54%]
httpTests/messageTests/test_message_sendlater.py::testValidFutureMessage PASSED [ 54%]
httpTests/messageTests/test_message_sendlater.py::testReturnsImmediately PASSED [ 54%]
httpTests/messageTests/test_message_sendlater.py::testInvalidReturnedIdUntilSent PASSED [ 55%]
httpTests/messageTests/test_message_sendlater.py::testNonmemberCannotSendlater PASSED [ 55%]
httpTests/messageTests/test_message_sendlater.py::testCannotTimeTravelAkaSendMessageInPast PASSED [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[] PASSED [ 55%]
httpTests/messageTests/test_message_sendlater.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 56%]
httpTests/messageTests/test_message_sendlater.py::testInvalidChannel PASSED [ 56%]
httpTests/messageTests/test_message_sendlater.py::testInvalidToken PASSED [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testValidFutureMessage PASSED [ 56%]
httpTests/messageTests/test_message_sendlaterdm.py::testReturnsImmediately PASSED [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidReturnedIdUntilSent PASSED [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testNonmemberCannotSendlater PASSED [ 57%]
httpTests/messageTests/test_message_sendlaterdm.py::testCannotTimeTravelAkaSendMessageInPast PASSED [ 58%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[] PASSED [ 58%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidMessage[mmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmmm] PASSED [ 58%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidDm PASSED [ 58%]
httpTests/messageTests/test_message_sendlaterdm.py::testInvalidToken PASSED [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToChannel PASSED [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulShareToDm PASSED [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[True] PASSED [ 59%]
httpTests/messageTests/test_message_share.py::testSuccessfulCrossShare[False] PASSED [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedDm PASSED [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareToUnjoinedChannel PASSED [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedChannel PASSED [ 60%]
httpTests/messageTests/test_message_share.py::testCannotShareFromUnjoinedDm PASSED [ 61%]
httpTests/messageTests/test_message_share.py::testInvalidOgMessageId PASSED [ 61%]
httpTests/messageTests/test_message_share.py::testInvalidMessageLength PASSED [ 61%]
httpTests/messageTests/test_message_share.py::testShareToInvalidChannelId PASSED [ 62%]
httpTests/messageTests/test_message_share.py::testShareToInvalidDmId PASSED [ 62%]
httpTests/messageTests/test_message_share.py::testInvalidToken PASSED    [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinChannelOwnerInChannel PASSED [ 62%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinDmOwnerInDm PASSED [ 63%]
httpTests/messageTests/test_message_unpin.py::testSuccessfulUnpinGlobalOwnerInChannel PASSED [ 63%]
httpTests/messageTests/test_message_unpin.py::testInvalidMessageId PASSED [ 63%]
httpTests/messageTests/test_message_unpin.py::testCannotUnpinTwice PASSED [ 63%]
httpTests/messageTests/test_message_unpin.py::testChannelMemberCantUnpin PASSED [ 64%]
httpTests/messageTests/test_message_unpin.py::testDmMemberCantUnpin PASSED [ 64%]
httpTests/messageTests/test_message_unpin.py::testGlobalOwnerCantUnpinInDm PASSED [ 64%]
httpTests/messageTests/test_message_unpin.py::testNonmemberCantUnpin PASSED [ 64%]
httpTests/messageTests/test_message_unpin.py::testInvalidToken PASSED    [ 65%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactInChannel PASSED [ 65%]
httpTests/messageTests/test_message_unreact.py::testSuccessfulUnreactToDmMessage PASSED [ 65%]
httpTests/messageTests/test_message_unreact.py::testInvalidMessageId PASSED [ 66%]
httpTests/messageTests/test_message_unreact.py::testInvalidReactId PASSED [ 66%]
httpTests/messageTests/test_message_unreact.py::testCantUnreactTwice PASSED [ 66%]
httpTests/messageTests/test_message_unreact.py::testNonmemberCannotUnreact PASSED [ 66%]
httpTests/messageTests/test_message_unreact.py::testInvalidToken PASSED  [ 67%]
httpTests/otherTests/test_clear.py::testClearWorks PASSED                [ 67%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendTriggersNotification PASSED [ 67%]
httpTests/otherTests/test_notifications_get.py::testTagNotInChannel PASSED [ 67%]
httpTests/otherTests/test_notifications_get.py::testMultipleSameTagsOnlyOneNotification PASSED [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagSelf PASSED       [ 68%]
httpTests/otherTests/test_notifications_get.py::testMultipleTags PASSED  [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSenddmTriggersNotification PASSED [ 68%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification FAILED [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageShareTriggersNotification PASSED [ 69%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterTriggersNotification PASSED [ 69%]
httpTests/otherTests/test_notifications_get.py::testMessageSendlaterTagNotifiesWhenSent PASSED [ 70%]
httpTests/otherTests/test_notifications_get.py::testTagThruMessageSendlaterdmTriggersNotification PASSED [ 70%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[a small message] PASSED [ 70%]
httpTests/otherTests/test_notifications_get.py::testTagNotificationMessagePreviewLength[AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA] PASSED [ 70%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[ch] PASSED [ 71%]
httpTests/otherTests/test_notifications_get.py::testReactTriggersNotification[dm] PASSED [ 71%]
httpTests/otherTests/test_notifications_get.py::testAddThruChInviteTriggersNotification PASSED [ 71%]
httpTests/otherTests/test_notifications_get.py::testAddThruDmCreateTriggersNotification PASSED [ 71%]
httpTests/otherTests/test_notifications_get.py::testMostRecent_20NotificationsFetched PASSED [ 72%]
httpTests/otherTests/test_notifications_get.py::testInvalidToken PASSED  [ 72%]
httpTests/otherTests/test_search.py::testNoMatches PASSED                [ 72%]
httpTests/otherTests/test_search.py::testSingleMatch PASSED              [ 72%]
httpTests/otherTests/test_search.py::testCaseInsensitiveMatch FAILED     [ 73%]
httpTests/otherTests/test_search.py::testMultipleMatches PASSED          [ 73%]
httpTests/otherTests/test_search.py::testMultipleChannelsJoined PASSED   [ 73%]
httpTests/otherTests/test_search.py::testSearchIncludesOnlyJoinedChannels PASSED [ 74%]
httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser FAILED [ 74%]
httpTests/otherTests/test_search.py::testInvalidSearch[] PASSED          [ 74%]
httpTests/otherTests/test_search.py::testInvalidSearch[aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa] PASSED [ 74%]
httpTests/otherTests/test_search.py::testInvalidToken PASSED             [ 75%]
httpTests/otherTests/test_users_all.py::testSuccessfulUsersAll PASSED    [ 75%]
httpTests/otherTests/test_users_all.py::testInvalidToken PASSED          [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[True] PASSED [ 75%]
httpTests/standupTests/test_standup_active.py::testCorrectReturnFormat[False] PASSED [ 76%]
httpTests/standupTests/test_standup_active.py::testActiveStandup PASSED  [ 76%]
httpTests/standupTests/test_standup_active.py::testInactiveStandup PASSED [ 76%]
httpTests/standupTests/test_standup_active.py::testInvalidChannelId PASSED [ 77%]
httpTests/standupTests/test_standup_active.py::testInvalidToken PASSED   [ 77%]
httpTests/standupTests/test_standup_send.py::testMessagesBufferedAndDisplayedCorrectly PASSED [ 77%]
httpTests/standupTests/test_standup_send.py::testStandupSendsAfterLoggedOut PASSED [ 77%]
httpTests/standupTests/test_standup_send.py::testReturnFormat PASSED     [ 78%]
httpTests/standupTests/test_standup_send.py::testNonMemberCannotStandupSend PASSED [ 78%]
httpTests/standupTests/test_standup_send.py::testSendWhenStandupInactive PASSED [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidMessageLength PASSED [ 78%]
httpTests/standupTests/test_standup_send.py::testInvalidChannelId PASSED [ 79%]
httpTests/standupTests/test_standup_send.py::testInvalidToken PASSED     [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupStartReturnFormat PASSED [ 79%]
httpTests/standupTests/test_standup_start.py::testStandupNoMessages PASSED [ 79%]
httpTests/standupTests/test_standup_start.py::testReturnsImmediately PASSED [ 80%]
httpTests/standupTests/test_standup_start.py::testStandupRestartableAfterLapse PASSED [ 80%]
httpTests/standupTests/test_standup_start.py::testStandupAffectsOnlyOneChannel PASSED [ 80%]
httpTests/standupTests/test_standup_start.py::testNonmemberCannotStartStandup PASSED [ 81%]
httpTests/standupTests/test_standup_start.py::testCannotStartStandupWhenAlreadyActive PASSED [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidStandupLength PASSED [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidChannelId PASSED [ 81%]
httpTests/standupTests/test_standup_start.py::testInvalidToken PASSED    [ 82%]
httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect FAILED    [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate FAILED [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin FAILED [ 82%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite FAILED [ 83%]
httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave FAILED [ 83%]
httpTests/statsTests/test_user_stats.py::testDmsTrackedDmCreate FAILED   [ 83%]
httpTests/statsTests/test_user_stats.py::testDmsTrackedDmLeave FAILED    [ 83%]
httpTests/statsTests/test_user_stats.py::testDmsTrackedDmRemove FAILED   [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend FAILED [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater FAILED [ 84%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm FAILED [ 85%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater FAILED [ 85%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare FAILED [ 85%]
httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish FAILED [ 85%]
httpTests/statsTests/test_user_stats.py::testInvolvementTracked FAILED   [ 86%]
httpTests/statsTests/test_user_stats.py::testInvalidToken PASSED         [ 86%]
httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect FAILED   [ 86%]
httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate FAILED [ 86%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate FAILED  [ 87%]
httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove FAILED  [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend FAILED [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater FAILED [ 87%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm FAILED [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater FAILED [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare FAILED [ 88%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish FAILED [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval FAILED [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted FAILED [ 89%]
httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved FAILED [ 89%]
httpTests/statsTests/test_users_stats.py::testUtilizationTracked FAILED  [ 90%]
httpTests/statsTests/test_users_stats.py::testInvalidToken FAILED        [ 90%]
httpTests/userTests/test_user_profile.py::testUserProfileValid PASSED    [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidUser PASSED         [ 90%]
httpTests/userTests/test_user_profile.py::testInvalidToken PASSED        [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testSuccessfulEmailChange PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testCannotChangeToTakenEmail PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[] PASSED [ 91%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[bob] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[@gmail.com] PASSED [ 92%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidEmail[ab@ab@gmail.com] PASSED [ 93%]
httpTests/userTests/test_user_profile_setemail.py::testInvalidToken PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testSuccessfulHandleChange PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testCannotChangeToTakenHandle PASSED [ 93%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[a] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aa] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[aaaaaaaaaaaaaaaaaaaaa] PASSED [ 94%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[new handle] PASSED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidHandle[newh@ndle] PASSED [ 95%]
httpTests/userTests/test_user_profile_sethandle.py::testInvalidToken PASSED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testUserProfileSetnameValidName PASSED [ 95%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-] PASSED [ 96%]
httpTests/userTests/test_user_profile_setname.py::testInvalidName[PPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP-MMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM] PASSED [ 97%]
httpTests/userTests/test_user_profile_setname.py::testInvalidToken PASSED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testReturnFormatCorrect PASSED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testCannotUploadNonJpeg PASSED [ 97%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[-1000-0-0-0] PASSED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0--1000-0-0] PASSED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0--1000-0] PASSED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidDimensions[0-0-0--1000] PASSED [ 98%]
httpTests/userTests/test_user_profile_uploadphoto.py::testXEndLessThanStartValue PASSED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testYEndLessThanStartValue PASSED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidUrl PASSED [ 99%]
httpTests/userTests/test_user_profile_uploadphoto.py::testInvalidToken PASSED [100%]

====== Marks recorded: 166.31 ======


=================================== FAILURES ===================================
_________________________ testNonMemberCannotAddOwner __________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='1', handleStr='buzzlightyear')
ctx = None

    def testNonMemberCannotAddOwner(woodysPublicToybox, userBuzz, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:44: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:148: InputError
_________________ testGlobalOwnerNonMemberCantAddownerPrivate __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerNonMemberCantAddownerPrivate(userWoody, zergsPrivateLair, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userWoody.token, zergsPrivateLair.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:49: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:148: InputError
__________________ testGlobalOwnerNonMemberCantAddownerPublic __________________

userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=0, token='0', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    def testGlobalOwnerNonMemberCantAddownerPublic(userBuzz, woodysPublicToybox, ctx):
        with pytest.raises(AccessError):
>           channelAddowner(userBuzz.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)

httpTests/channelTests/test_channel_addowner.py:54: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:77: in channelAddowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:148: InputError
__________________________ testOverFiftyMessagesSent ___________________________

woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
ctx = None

    def testOverFiftyMessagesSent(woodysPublicToybox, userWoody, ctx):
        messageIds = [
            messageSend(userWoody.token, woodysPublicToybox.channelId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
        assert chMsgs['start'] == 0
        assert chMsgs['end'] == 50
>       assert messageIds[0: 50] == [m['messageId'] for m in chMsgs['messages']]
E       assert [50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2,\n 1] == [49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2,\n 1,\n 0]
E         At index 0 diff: 50 != 49
E         Full diff:
E           [
E         +  50,
E            49,
E            48,
E            47,
E            46,
E            45,
E            44,
E            43,
E            42,
E            41,
E            40,
E            39,
E            38,
E            37,
E            36,
E            35,
E            34,
E            33,
E            32,
E            31,
E            30,
E            29,
E            28,
E            27,
E            26,
E            25,
E            24,
E            23,
E            22,
E            21,
E            20,
E            19,
E            18,
E            17,
E            16,
E            15,
E            14,
E            13,
E            12,
E            11,
E            10,
E            9,
E            8,
E            7,
E            6,
E            5,
E            4,
E            3,
E            2,
E            1,
E         -  0,
E           ]

httpTests/channelTests/test_channel_messages.py:45: AssertionError
__________________________ testMmberCannotRemoveOwner __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='1', handleStr='buzzlightyear')
ctx = None

    def testMmberCannotRemoveOwner(userWoody, woodysPublicToybox, userBuzz, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
        with pytest.raises(AccessError):
>           channelRemoveowner(userBuzz.token, woodysPublicToybox.channelId, userWoody.uId, ctx)

httpTests/channelTests/test_channel_removeowner.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
httpTests/fakepi/channel.py:90: in channelRemoveowner
    return util.parseResponse(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

res = <Response [400]>

    def parseResponse(res):
        if res.status_code in [200, 201]:
            return res.json()
        elif res.status_code == 400:
>           raise error.InputError()
E           httpTests.error.InputError: 400 Bad Request: None

httpTests/fakepi/util.py:148: InputError
__________________________ testOverFiftyMessagesSent ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    def testOverFiftyMessagesSent(userWoody, woodyAndBuzzDm, ctx):
        messageIds = [
            messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'you are a toy', ctx)['messageId'] for x in
            range(51)
        ]
        messageIds.reverse()
    
        dmMsgs = dmMessages(userWoody.token, woodyAndBuzzDm.dmId, 0, ctx)
        assert dmMsgs['start'] == 0
        assert dmMsgs['end'] == 50
>       assert messageIds[0: 50] == [m['messageId'] for m in dmMsgs['messages']]
E       assert [50,\n 49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2,\n 1] == [49,\n 48,\n 47,\n 46,\n 45,\n 44,\n 43,\n 42,\n 41,\n 40,\n 39,\n 38,\n 37,\n 36,\n 35,\n 34,\n 33,\n 32,\n 31,\n 30,\n 29,\n 28,\n 27,\n 26,\n 25,\n 24,\n 23,\n 22,\n 21,\n 20,\n 19,\n 18,\n 17,\n 16,\n 15,\n 14,\n 13,\n 12,\n 11,\n 10,\n 9,\n 8,\n 7,\n 6,\n 5,\n 4,\n 3,\n 2,\n 1,\n 0]
E         At index 0 diff: 50 != 49
E         Full diff:
E           [
E         +  50,
E            49,
E            48,
E            47,
E            46,
E            45,
E            44,
E            43,
E            42,
E            41,
E            40,
E            39,
E            38,
E            37,
E            36,
E            35,
E            34,
E            33,
E            32,
E            31,
E            30,
E            29,
E            28,
E            27,
E            26,
E            25,
E            24,
E            23,
E            22,
E            21,
E            20,
E            19,
E            18,
E            17,
E            16,
E            15,
E            14,
E            13,
E            12,
E            11,
E            10,
E            9,
E            8,
E            7,
E            6,
E            5,
E            4,
E            3,
E            2,
E            1,
E         -  0,
E           ]

httpTests/dmTests/test_dm_messages.py:38: AssertionError
__________________________ testMessageIdsUniqueIter3 ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='1', handleStr='lordzerg')
woodyAndBuzzDm = DM(owner=0, members=[2], name='buzzlightyear, sheriffwoody', dmId=0)
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    @pytest.mark.marks(0.5)
    @iteration3
    def testMessageIdsUniqueIter3(userWoody, userZerg, woodyAndBuzzDm, zergsPrivateLair, ctx):
        msg1 = messageSend(userZerg.token, zergsPrivateLair.channelId, 'hi', ctx)
    
        # intra
        msg2 = messageSendlater(userZerg.token, zergsPrivateLair.channelId, 'hi', utcNow() + 1, ctx)
    
        # cross
        msg3 = messageSenddm(userWoody.token, woodyAndBuzzDm.dmId, 'hi again', ctx)
        msg4 = messageSendlaterdm(userWoody.token, woodyAndBuzzDm.dmId, 'hi one more time', utcNow() + 1, ctx)
    
        sleep(2)
    
        assert msg1['messageId'] != msg2['messageId']
>       assert msg2['messageId'] != msg3['messageId']
E       assert 1 != 1

httpTests/messageTests/test_message_meta.py:36: AssertionError
__________________ testTagThruMessageEditTriggersNotification __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='1', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4b8cca0>
ctx = None

    @iteration3
    def testTagThruMessageEditTriggersNotification(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelInvite(userWoody.token, woodysPublicToybox.channelId, userBuzz.uId, ctx)
    
        aMsg = messageFactory(userBuzz, woodysPublicToybox)
    
        content = f'@{userWoody.handleStr} hi'
        messageEdit(userBuzz.token, aMsg.messageId, content, ctx)
    
        notifs = notificationsGet(userWoody.token, ctx)
    
>       assert notifs == {'notifications': [{
            'channelId': woodysPublicToybox.channelId,
            'dmId': -1,
            'notificationMessage': f'{userBuzz.handleStr} tagged you in {woodysPublicToybox.name}: {content[:20]}'
        }]}
E       AssertionError: assert {'notifications': []} == {'notifications': [{'channelId': 0,\n                    'dmId': -1,\n                    'notificationMessage': 'buzzlightyear tagged you in woodys '\n                                           'toybox: @sheriffwoody hi'}]}
E         Differing items:
E         {'notifications': []} != {'notifications': [{'channelId': 0, 'dmId': -1, 'notificationMessage': 'buzzlightyear tagged you in woodys toybox: @sheriffwoody hi'}]}
E         Full diff:
E           {
E         +  'notifications': [],
E         -  'notifications': [{'channelId': 0,
E         -                     'dmId': -1,
E         -                     'notificationMessage': 'buzzlightyear tagged you in woodys '
E         -                                            'toybox: @sheriffwoody hi'}],
E           }

httpTests/otherTests/test_notifications_get.py:128: AssertionError
___________________________ testCaseInsensitiveMatch ___________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4b04310>
ctx = None

    @iteration3
    def testCaseInsensitiveMatch(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox, 'AnYthing')
    
        msgs = search(userWoody.token, 'aNy', ctx)
    
        chMsgs = channelMessages(userWoody.token, woodysPublicToybox.channelId, 0, ctx)
>       assert msgs['messages'] == chMsgs['messages']
E       AssertionError: assert [] == [{'isPinned': False,\n  'message': 'AnYthing',\n  'messageId': 0,\n  'reacts': [],\n  'timeSent': 1668873083,\n  'uId': 0}]
E         Right contains one more item: {'isPinned': False, 'message': 'AnYthing', 'messageId': 0, 'reacts': [], ...}
E         Full diff:
E           [
E         +  ,
E         -  {'isPinned': False,
E         -   'message': 'AnYthing',
E         -   'messageId': 0,
E         -   'reacts': [],
E         -   'timeSent': 1668873083,
E         -   'uId': 0},
E           ]

httpTests/otherTests/test_search.py:44: AssertionError
_________________ testSearchMatchesMoreThanJustAuthorisedUser __________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='1', handleStr='buzzlightyear')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4abe1f0>
ctx = None

    @iteration3
    def testSearchMatchesMoreThanJustAuthorisedUser(userWoody, userBuzz, woodysPublicToybox, messageFactory, ctx):
        channelJoin(userBuzz.token, woodysPublicToybox.channelId, ctx)
    
        messageFactory(userBuzz, woodysPublicToybox, 'hi')
        messageFactory(userWoody, woodysPublicToybox, 'hi')
    
        msgs = search(userWoody.token, 'hi', ctx)['messages']
    
>       assert len(msgs) == 2
E       assert 1 == 2
E         +1
E         -2

httpTests/otherTests/test_search.py:114: AssertionError
____________________________ testReturnTypeCorrect _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testReturnTypeCorrect(userWoody, ctx):
        stats = userStats(userWoody.token, ctx)
    
>       assert 'userStats' in stats
E       AssertionError: assert 'userStats' in {'channelsJoined': [{'numChannelsJoined': 0, 'timeStamp': 0}], 'dmsJoined': [{'numDmsJoined': 0, 'timeStamp': 0}], 'involvementRate': 0, 'messagesSent': [{'numMessagesSent': 0, 'timeStamp': 0}]}

httpTests/statsTests/test_user_stats.py:23: AssertionError
______________________ testChannelsTrackedChannelsCreate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7f1fd4a95550>
ctx = None

    @iteration3
    def testChannelsTrackedChannelsCreate(userWoody, channelFactory, ctx):
        channelFactory(userWoody, 'poop', True)
    
>       chStats = userStats(userWoody.token, ctx)['userStats']['channelsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:45: KeyError
________________________ testChannelsTrackedChannelJoin ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testChannelsTrackedChannelJoin(userWoody, zergsPrivateLair, ctx):
        channelJoin(userWoody.token, zergsPrivateLair.channelId, ctx)
    
>       chStats = userStats(userWoody.token, ctx)['userStats']['channelsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:56: KeyError
_______________________ testChannelsTrackedChannelInvite _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='1', handleStr='lordzerg')
zergsPrivateLair = Channel(name='zergs lair', isPublic=False, channelId=0, ownerMembers=[1], allMembers=[])
ctx = None

    @iteration3
    def testChannelsTrackedChannelInvite(userWoody, userZerg, zergsPrivateLair, ctx):
        channelInvite(userZerg.token, zergsPrivateLair.channelId, userWoody.uId, ctx)
    
>       chStats = userStats(userWoody.token, ctx)['userStats']['channelsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:67: KeyError
_______________________ testChannelsTrackedChannelLeave ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
ctx = None

    @iteration3
    def testChannelsTrackedChannelLeave(userWoody, woodysPublicToybox, ctx):
        channelLeave(userWoody.token, woodysPublicToybox.channelId, ctx)
    
>       chStats = userStats(userWoody.token, ctx)['userStats']['channelsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:78: KeyError
____________________________ testDmsTrackedDmCreate ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f1fd4ad3dc0>, ctx = None

    @iteration3
    def testDmsTrackedDmCreate(userWoody, dmFactory, ctx):
        dmFactory(userWoody, [])
    
>       dmStats = userStats(userWoody.token, ctx)['userStats']['dmsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:89: KeyError
____________________________ testDmsTrackedDmLeave _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    @iteration3
    def testDmsTrackedDmLeave(userWoody, woodyAndBuzzDm, ctx):
        dmLeave(userWoody.token, woodyAndBuzzDm.dmId, ctx)
    
>       dmStats = userStats(userWoody.token, ctx)['userStats']['dmsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:100: KeyError
____________________________ testDmsTrackedDmRemove ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
userBuzz = User(email='buzz.lightyear@starcommand.com', password='qazwsx@@', nameFirst='buzz', nameLast='lightyear', uId=1, token='1', handleStr='buzzlightyear')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    @iteration3
    def testDmsTrackedDmRemove(userWoody, userBuzz, woodyAndBuzzDm, ctx):
        dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx)
    
>       dmStatsWoody = userStats(userWoody.token, ctx)['userStats']['dmsJoined']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:111: KeyError
________________________ testMessagesTrackedMessageSend ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4ad3d30>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSend(userWoody, woodysPublicToybox, messageFactory, ctx):
        messageFactory(userWoody, woodysPublicToybox)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:124: KeyError
_____________________ testMessagesTrackedMessageSendlater ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4a83e50>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSendlater(userWoody, woodysPublicToybox, messageFactory, ctx):
        messageFactory(userWoody, woodysPublicToybox, delay=1)
    
        sleep(1.5)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:137: KeyError
_______________________ testMessagesTrackedMessageSenddm _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4a0c430>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSenddm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        messageFactory(userWoody, woodyAndBuzzDm)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:148: KeyError
____________________ testMessagesTrackedMessageSenddmlater _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4a52dc0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSenddmlater(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        messageFactory(userWoody, woodyAndBuzzDm, delay=1)
    
        sleep(1.5)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:161: KeyError
_______________________ testMessagesTrackedMessageShare ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4a83310>
ctx = None

    @iteration3
    def testMessagesTrackedMessageShare(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        messageShare(userWoody.token, aMsg.messageId, '', woodysPublicToybox.channelId, -1, ctx)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:173: KeyError
_______________________ testMessagesTrackedStandupFinish _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
standupFactory = <function standupFactory.<locals>.makeStandup at 0x7f1fd49f1310>
ctx = None

    @iteration3
    def testMessagesTrackedStandupFinish(userWoody, woodysPublicToybox, standupFactory, ctx):
        standupFactory(userWoody, woodysPublicToybox, 1)
        standupSend(userWoody.token, woodysPublicToybox.channelId, 'hi', ctx)
    
        sleep(2)
    
>       msgStats = userStats(userWoody.token, ctx)['userStats']['messagesSent']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:187: KeyError
____________________________ testInvolvementTracked ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='1', handleStr='lordzerg')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7f1fd49e3ee0>
ctx = None

    @iteration3
    def testInvolvementTracked(userWoody, userZerg, channelFactory, ctx):
>       stats = userStats(userWoody.token, ctx)['userStats']
E       KeyError: 'userStats'

httpTests/statsTests/test_user_stats.py:196: KeyError
____________________________ testReturnTypeCorrect _____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testReturnTypeCorrect(userWoody, ctx):
        stats = usersStats(userWoody.token, ctx)
    
>       assert 'workspaceStats' in stats
E       AssertionError: assert 'workspaceStats' in {'channelsExist': [{'numChannelsExist': 0, 'timeStamp': 0}], 'dmsExist': [{'numDmsExist': 0, 'timeStamp': 0}], 'messagesExist': [{'numMessagesExist': 0, 'timeStamp': 0}], 'utilizationRate': 0}

httpTests/statsTests/test_users_stats.py:22: AssertionError
______________________ testChannelsTrackedChannelsCreate _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7f1fd4a52dc0>
ctx = None

    @iteration3
    def testChannelsTrackedChannelsCreate(userWoody, channelFactory, ctx):
        channelFactory(userWoody, 'poop', True)
    
>       chStats = usersStats(userWoody.token, ctx)['workspaceStats']['channelsExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:48: KeyError
____________________________ testDmsTrackedDmCreate ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f1fd49f1280>, ctx = None

    @iteration3
    def testDmsTrackedDmCreate(userWoody, dmFactory, ctx):
        dmFactory(userWoody, [])
    
>       dmStats = usersStats(userWoody.token, ctx)['workspaceStats']['dmsExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:59: KeyError
____________________________ testDmsTrackedDmRemove ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
ctx = None

    @iteration3
    def testDmsTrackedDmRemove(userWoody, woodyAndBuzzDm, ctx):
        dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx)
    
>       dmStats = usersStats(userWoody.token, ctx)['workspaceStats']['dmsExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:70: KeyError
________________________ testMessagesTrackedMessageSend ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4a83ca0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSend(userWoody, woodysPublicToybox, messageFactory, ctx):
        messageFactory(userWoody, woodysPublicToybox)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:81: KeyError
_____________________ testMessagesTrackedMessageSendlater ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4a0c280>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSendlater(userWoody, woodysPublicToybox, messageFactory, ctx):
        messageFactory(userWoody, woodysPublicToybox, delay=1)
    
        sleep(1.5)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:94: KeyError
_______________________ testMessagesTrackedMessageSenddm _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd49b5e50>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSenddm(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        messageFactory(userWoody, woodyAndBuzzDm)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:105: KeyError
____________________ testMessagesTrackedMessageSenddmlater _____________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4a529d0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageSenddmlater(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        messageFactory(userWoody, woodyAndBuzzDm, delay=1)
    
        sleep(1.5)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:118: KeyError
_______________________ testMessagesTrackedMessageShare ________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd49f14c0>
ctx = None

    @iteration3
    def testMessagesTrackedMessageShare(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
        messageShare(userWoody.token, aMsg.messageId, '', woodysPublicToybox.channelId, -1, ctx)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:130: KeyError
_______________________ testMessagesTrackedStandupFinish _______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
standupFactory = <function standupFactory.<locals>.makeStandup at 0x7f1fd49945e0>
ctx = None

    @iteration3
    def testMessagesTrackedStandupFinish(userWoody, woodysPublicToybox, standupFactory, ctx):
        standupFactory(userWoody, woodysPublicToybox, 1)
        standupSend(userWoody.token, woodysPublicToybox.channelId, 'hi', ctx)
    
        sleep(2)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:144: KeyError
______________________ testMessagesTrackedEditedToRemoval ______________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd49bb280>
ctx = None

    @iteration3
    def testMessagesTrackedEditedToRemoval(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        messageEdit(userWoody.token, aMsg.messageId, '', ctx)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:157: KeyError
__________________________ testMessagesTrackedDeleted __________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodysPublicToybox = Channel(name='woodys toybox', isPublic=True, channelId=0, ownerMembers=[0], allMembers=[])
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4a0c310>
ctx = None

    @iteration3
    def testMessagesTrackedDeleted(userWoody, woodysPublicToybox, messageFactory, ctx):
        aMsg = messageFactory(userWoody, woodysPublicToybox)
    
        messageRemove(userWoody.token, aMsg.messageId, ctx)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:170: KeyError
_________________________ testMessagesTrackedDmRemoved _________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
woodyAndBuzzDm = DM(owner=0, members=[1], name='buzzlightyear, sheriffwoody', dmId=0)
messageFactory = <function messageFactory.<locals>.makeMessage at 0x7f1fd4994700>
ctx = None

    @iteration3
    def testMessagesTrackedDmRemoved(userWoody, woodyAndBuzzDm, messageFactory, ctx):
        messageFactory(userWoody, woodyAndBuzzDm)
    
        dmRemove(userWoody.token, woodyAndBuzzDm.dmId, ctx)
    
>       msgStats = usersStats(userWoody.token, ctx)['workspaceStats']['messagesExist']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:183: KeyError
____________________________ testUtilizationTracked ____________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
userZerg = User(email='zerg.thedestroyer@zergworld.com', password='!!qazwsx', nameFirst='lord', nameLast='zerg', uId=1, token='1', handleStr='lordzerg')
channelFactory = <function channelFactory.<locals>.makeChannel at 0x7f1fd49b5700>
dmFactory = <function dmFactory.<locals>.makeDm at 0x7f1fd49b5280>, ctx = None

    @iteration3
    def testUtilizationTracked(userWoody, userZerg, channelFactory, dmFactory, ctx):
>       stats = usersStats(userWoody.token, ctx)['workspaceStats']
E       KeyError: 'workspaceStats'

httpTests/statsTests/test_users_stats.py:192: KeyError
_______________________________ testInvalidToken _______________________________

userWoody = User(email='sheriff.woody@andysroom.com', password='qazwsx!!', nameFirst='sheriff', nameLast='woody', uId=0, token='0', handleStr='sheriffwoody')
ctx = None

    @iteration3
    def testInvalidToken(userWoody, ctx):
        authLogout(userWoody.token, ctx)
        with pytest.raises(AccessError):
>           usersStats(userWoody.token, ctx)
E           Failed: DID NOT RAISE <class 'httpTests.error.AccessError'>

httpTests/statsTests/test_users_stats.py:210: Failed
=========================== short test summary info ============================
FAILED httpTests/channelTests/test_channel_addowner.py::testNonMemberCannotAddOwner
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPrivate
FAILED httpTests/channelTests/test_channel_addowner.py::testGlobalOwnerNonMemberCantAddownerPublic
FAILED httpTests/channelTests/test_channel_messages.py::testOverFiftyMessagesSent
FAILED httpTests/channelTests/test_channel_removeowner.py::testMmberCannotRemoveOwner
FAILED httpTests/dmTests/test_dm_messages.py::testOverFiftyMessagesSent - ass...
FAILED httpTests/messageTests/test_message_meta.py::testMessageIdsUniqueIter3
FAILED httpTests/otherTests/test_notifications_get.py::testTagThruMessageEditTriggersNotification
FAILED httpTests/otherTests/test_search.py::testCaseInsensitiveMatch - Assert...
FAILED httpTests/otherTests/test_search.py::testSearchMatchesMoreThanJustAuthorisedUser
FAILED httpTests/statsTests/test_user_stats.py::testReturnTypeCorrect - Asser...
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelsCreate
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelJoin
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelInvite
FAILED httpTests/statsTests/test_user_stats.py::testChannelsTrackedChannelLeave
FAILED httpTests/statsTests/test_user_stats.py::testDmsTrackedDmCreate - KeyE...
FAILED httpTests/statsTests/test_user_stats.py::testDmsTrackedDmLeave - KeyEr...
FAILED httpTests/statsTests/test_user_stats.py::testDmsTrackedDmRemove - KeyE...
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSend
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSendlater
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddm
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageSenddmlater
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedMessageShare
FAILED httpTests/statsTests/test_user_stats.py::testMessagesTrackedStandupFinish
FAILED httpTests/statsTests/test_user_stats.py::testInvolvementTracked - KeyE...
FAILED httpTests/statsTests/test_users_stats.py::testReturnTypeCorrect - Asse...
FAILED httpTests/statsTests/test_users_stats.py::testChannelsTrackedChannelsCreate
FAILED httpTests/statsTests/test_users_stats.py::testDmsTrackedDmCreate - Key...
FAILED httpTests/statsTests/test_users_stats.py::testDmsTrackedDmRemove - Key...
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSend
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSendlater
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddm
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageSenddmlater
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedMessageShare
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedStandupFinish
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedEditedToRemoval
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedDeleted
FAILED httpTests/statsTests/test_users_stats.py::testMessagesTrackedDmRemoved
FAILED httpTests/statsTests/test_users_stats.py::testUtilizationTracked - Key...
FAILED httpTests/statsTests/test_users_stats.py::testInvalidToken - Failed: D...
================== 40 failed, 334 passed in 76.94s (0:01:16) ===================
